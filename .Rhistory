as.numeric(data$continent)
data$continent
continents <- data[1:195, 1]
continents$number <- as.numeric(factor(data$continent))
factor(data$continent)
scatterplot3d(cmd, pch=16)
legend(-2.5, -2, fill=colors, legend=levels(factor(data$continent)), col=colors, cex=0.8, xpd = TRUE, horiz = TRUE)
scatterplot3d(cmd, pch=16, color = colors)
legend(-2.5, -2, fill=colors, legend=levels(factor(data$continent)), col=colors, cex=0.8, xpd = TRUE, horiz = TRUE)
s3d <- scatterplot3d(cmd, col = colors, pch=".", cex.axis = 1)
text(s3d.coords$x, s3d.coords$y,
labels=substring(data[,2], 0, 3),
pos=4, cex=.5)
s3d <- scatterplot3d(cmd, col = colors, pch=".", cex.axis = 1)
s3d <- scatterplot3d(cmd, pch=".", cex.axis = 1)
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1)
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1)
s3d$xyz.convert(x, y, z)
legend("bottom", legend = levels(format(data$continent)),
col =  colors, pch = 16,
inset = -0.25, xpd = TRUE, horiz = TRUE)
levels(format(data$continent))
format(data$continent)
levels(format(data$continent)
)
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1)
s3d$xyz.convert(x, y, z)
legend("bottom", fill = colors, legend = levels(format(data$continent)),
col =  colors, pch = 16,
inset = -0.25, xpd = TRUE, horiz = TRUE)
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors)
colors2 <- c("#999999", "#E69F00", "#56B4E9")
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors2)
cmd
colors2 <- c("#999999", "#E69F00", "#56B4E9")
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors2)
scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors2)
colors3 <- colors[as.numeric(format(data$continent))]
colors3
data$continent
format(data$continent)
as.numeric(format(data$continent))
format(data$continent)
levels(format(data$continent)
)
colors3 <- colors[as.numeric(factor(data$continent))]
colors3
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors3)
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors3)
legend("bottom", fill = colors3, legend = levels(format(data$continent)),
col =  colors3, pch = 16,
inset = -0.25, xpd = TRUE, horiz = TRUE)
colors_data <- colors[as.numeric(factor(data$continent))]
scatterplot3d(cmd, pch=16)
legend(-2.5, -2, fill=colors_data, legend=levels(factor(data$continent)), col=colors_data, cex=0.8, xpd = TRUE, horiz = TRUE)
colors_data <- colors[as.numeric(factor(data$continent))]
scatterplot3d(cmd, pch=16)
legend(fill=colors_data, legend=levels(factor(data$continent)), col=colors_data, cex=0.8, xpd = TRUE, horiz = TRUE)
colors_data <- colors[as.numeric(factor(data$continent))]
scatterplot3d(cmd, pch=16)
legend("top", fill=colors_data, legend=levels(factor(data$continent)), col=colors_data, cex=0.8, xpd = TRUE, horiz = TRUE)
colors_data <- colors[as.numeric(factor(data$continent))]
scatterplot3d(cmd, pch=16)
legend("top", fill=colors_data, legend=levels(factor(data$continent)), col=colors_data, cex=0.8)
colors_data <- colors[as.numeric(factor(data$continent))]
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors3)
legend("top", fill=colors_data, legend=levels(factor(data$continent)), col=colors_data, cex=0.8)
?legend
colors_data <- colors[as.numeric(factor(data$continent))]
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors3)
legend("topright", fill=colors_data, legend=levels(factor(data$continent)), col=colors_data, cex=0.8)
colors_data <- colors[as.numeric(factor(data$continent))]
s3d <- scatterplot3d(cmd, pch=16, cex.axis = 1, color = colors_data)
legend("topright", fill=colors_data, legend=levels(factor(data$continent)), col=colors_data, cex=0.8)
?legend
euro <- read.csv("http://tiny.cc/isqs6350_euroemp", header=TRUE, row.names=1)
head(euro)
# Remove outliers (removing Albania and Giblartar),
euro.c <- euro[-c(19,28), ]
# and focus on numerical variables (removing the first column)
mydata = euro.c[, -1]
head(mydata)
data.s <- scale(mydata)
d <- dist(data.s)
hc <- hclust(d, "complete")
plot(hc, main = "Complete Linkage Hierarchical Clustering Dendogram", cex=0.5)
plot(rev(hc$height))
ct <- cutree(hc, 4)
table(ct)
subset(rownames(data), ct==1)
ct <- cutree(hc, 4)
ct
table(ct)
subset(rownames(data), ct==1)
data
rownames(data)
euro <- read.csv("http://tiny.cc/isqs6350_euroemp", header=TRUE, row.names=1)
head(euro)
# Remove outliers (removing Albania and Giblartar),
euro.c <- euro[-c(19,28), ]
# and focus on numerical variables (removing the first column)
mydata = euro.c[, -1]
head(mydata)
data.s <- scale(mydata)
d <- dist(data.s)
hc <- hclust(d, "complete")
plot(hc, main = "Complete Linkage Hierarchical Clustering Dendogram", cex=0.5)
rownames(mydata)
subset(rownames(mydata), ct==1)
plot.wgss = function(mydata, maxc) {
wss = numeric(maxc)
for (i in 1:maxc)
wss[i] = kmeans(mydata,centers=i, nstart = 10)$tot.withinss
plot(1:maxc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares", main="Scree Plot")
}
plot.wgss(mydata, 20)
km <- kmeans(data.s, centers = 4, nstart = 10)
table(km$cluster)
subset(data.s, km$cluster == 1)
km$centers
pca <- princomp(data.s)
pca$loadings[,1:3]
plot(pca$scores[, c(2,3)], col = km$cluster)
pca <- princomp(data.s)
pca$loadings[,1:3]
plot(pca$scores[, c(1,2)], col = km$cluster)
plot(pca$scores[, c(1,3)], col = km$cluster)
plot(pca$scores[, c(2,3)], col = km$cluster)
plot(pca$scores[, c(2,3)], col = km$cluster, main="Principal Components 2 and 3")
km$cluster
pca$loadings[,1:3]
cut(pca$loadings[,1:3], 0.5)
cut(pca$loadings[,1:3], 5)
cut(pca$loadings[,1:3], 1)
pca$loadings[,1:3]
cut(pca$loadings[,1:3], 0.1)
print(pca$loadings[,1:3], cut=0.1)
print(pca$loadings[,1:3], cut=0.3)
print(pca$loadings[,1:3], cut=0.5)
print(pca$loadings[,1:3], cut=0.1)
pca$loadings[,1:3]
print(pca$loadings[,1:3], cut=0.1)
print(pca$loadings[,1:3], cut=0.01)
pca$loadings[,1:3]
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
label("topright", label=km$cluster)
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
label("topright", fill=c("red", "green", "blue", "black"), label=km$cluster)
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
legend("topright", legend=km$cluster)
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
legend("topright", legend=levels(km$cluster))
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
legend("topright", legend=levels(factor(km$cluster)))
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
legend("topright", colors =km$cluster, legend=levels(factor(km$cluster)))
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
km$centers
library(mclust)
mc <- Mclust(data)
mc <- Mclust(mydata)
table(mc$classification)
plot(mc, what = "classification")
summary(mc)
plot(mydata, main="Model-Based Cluster Groups", col = mc$classification)
plot(mc, what = "classification")
install.packages("sem")
install.packages("semPLot")
ab <- c(0.73,
0.70, 0.68,
0.58, 0.61, 0.57,
0.46, 0.43, 0.40, 0.37,
0.56, 0.52, 0.48, 0.41, 0.72)
ability <- diag(6)/2
ability[upper.tri(ability)] <- ab
ability <- ability + t(ability)
rownames(ability) <- colnames(ability) <-
c("SCA","PPE","PTE","PFE","EA","CP")
ability # We u
# install.packages("sem")
# install.packages("semPlot")
library("sem")
ability_model <- specifyModel(file = "ability_model.txt")
ability_sem <- sem(ability_model, ability, 556)
summary(ability_sem)
ability_sem$C
# non-restricted Cor matrix
ability_sem$S # This is the original correlation matrix: ability.
# the root mean square error
sqrt(mean((ability_sem$C-ability_sem$S)^2))
df = nrow(ability)*(nrow(ability)+1)/2 - length(ability_sem$coeff)
df
summary(ability_sem)
# P-value < 0.5 implies t
dif = ability_sem$C-ability_sem$S
# it measures the root mean square error of the lower or upper triangle of the discripancy matrix.
sqrt(mean(dif[lower.tri(dif, diag = T)]^2))
options(fit.indices = c("GFI", "AGFI", "SRMR")) # Some fit indices
summary(ability_sem)
library(semPlot)
install.packages("semPlot")
semPaths(ability_sem, rotation = 2, 'est')
library(semPlot)
semPaths(ability_sem, rotation = 2, 'est')
crime <- read.csv("http://tiny.cc/isqs6350_crime", header=TRUE, row.names=1)
efa <- factanal(crime, 2)
print(efa$loadings, cut = 0.5)
crime_model <- specifyModel(text = "
Personal     -> MURDER, lambda1, NA
Personal     -> RAPE, lambda2, NA
Personal     -> ROBBERY, lambda3, NA
Personal     -> ASSAULT, lambda4, NA
Property     -> BURGLARY, lambda5, NA
Property     -> LARCENY, lambda6, NA
Property     -> AUTO, lambda7, NA
Personal    <-> Property, rho, NA
MURDER      <-> MURDER, theta1, NA
RAPE        <-> RAPE, theta2, NA
ROBBERY     <-> ROBBERY, theta3, NA
ASSAULT     <-> ASSAULT, theta4, NA
BURGLARY    <-> BURGLARY, theta5, NA
LARCENY     <-> LARCENY, theta6, NA
AUTO        <-> AUTO, theta7, NA
Personal <-> Personal, NA, 1
Property <-> Property, NA, 1")
crime_sem <- sem(crime_model, cor(crime), nrow(crime))
summary(crime_sem)
options(fit.indices = c("GFI", "AGFI", "SRMR")) # Some fit indices
summary(crime_sem)
library(semPlot)
semPaths(crime_sem, rotation = 2, 'std', 'est')
euro <- read.csv("http://tiny.cc/isqs6350_euroemp", header=TRUE, row.names=1)
head(euro)
# Remove outliers (removing Albania and Giblartar),
euro.c <- euro[-c(19,28), ]
# and focus on numerical variables (removing the first column)
mydata = euro.c[, -1]
head(mydata)
data.s <- scale(mydata)
d <- dist(data.s)
hc <- hclust(d, "complete")
plot(hc, main = "Complete Linkage Hierarchical Clustering Dendogram", cex=0.5)
plot(rev(hc$height))
subset(rownames(mydata), ct==2)
ct <- cutree(hc, 4)
subset(rownames(mydata), ct==1)
subset(rownames(mydata), ct==2)
subset(rownames(mydata), ct==3)
subset(rownames(mydata), ct==4)
plot.wgss = function(mydata, maxc) {
wss = numeric(maxc)
for (i in 1:maxc)
wss[i] = kmeans(mydata,centers=i, nstart = 10)$tot.withinss
plot(1:maxc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares", main="Scree Plot")
}
plot.wgss(mydata, 20)
plot.wgss(data.s, 20)
km <- kmeans(data.s, centers = 4, nstart = 10)
table(km$cluster)
subset(data.s, km$cluster == 1)
subset(data.s, km$cluster == 2)
subset(data.s, km$cluster == 3)
km$centers
km <- kmeans(data.s, centers = 4)
km$centers
km <- kmeans(data.s, 4)
table(km$cluster)
km$centers
euro <- read.csv("http://tiny.cc/isqs6350_euroemp", header=TRUE, row.names=1)
head(euro)
# Remove outliers (removing Albania and Giblartar),
euro.c <- euro[-c(19,28), ]
# and focus on numerical variables (removing the first column)
mydata = euro.c[, -1]
head(mydata)
data.s <- scale(mydata)
km <- kmeans(data.s, 4)
km$centers
set.seed(3445)
km <- kmeans(data.s, 4, nstart=10)
km$centers
pca <- princomp(data.s)
pca$loadings[,1:3]
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
legend(pca$scores[, c(1,2)], fill = km$cluster, legend=km$cluster)
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
legend(pca$scores[, c(1,2)], fill = km$cluster, legend=levels(factor(km$cluster)))
factor(km$cluster)
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
legend(pca$scores[, c(1,2)], legend=levels(factor(km$cluster)))
plot(pca$scores[, c(1,2)], col = km$cluster,  main="Principal Components 1 and 2")
legend(pca$scores[, c(1,2)], fill = levels(factor(km$cluster)), legend=levels(factor(km$cluster)))
plot(pca$scores[,1:2], col=km$cluster)
legend(0,0,groups, col=km$cluster, pch=1)
plot(pca$scores[,1:2], col=km$cluster)
legend(0,0,km$cluster, col=km$cluster, pch=1)
text(pca$scores[,1:2], labels=km$cluster, pos=3)
library(mclust)
mc <- Mclust(mydata)
plot(mc, what="uncertaintity")
plot(mc, what="uncertainty")
plot(mc, what="uncertainty", dimens = c(6,8))
mc$uncertainty
data.frame(mc$classification,mc$uncertainty)
sort(df_uncertainty$mc.uncertainty)
df_uncertainty <- data.frame(mc$classification,mc$uncertainty)
sort(df_uncertainty$mc.uncertainty)
df[,order(df_uncertainty$mc.uncertainty)]
df[order(df_uncertainty$mc.uncertainty)]
df_uncertainty[order(df_uncertainty$mc.uncertainty)]
df_uncertainty[order(df_uncertainty$mc.uncertainty), ]
plot(mc, what="uncertainty", dimens = c(6,8))
text(mc, label=rownames(data.s))
plot(mc, what="uncertainty", dimens = c(6,8))
text(mc, label=rownames(mydata))
plot(mc, what="uncertainty", dimens = c(6,8))
text(mc$data[,c(6,8)], label=rownames(data.s))
plot(mc, what="uncertainty", dimens = c(6,8))
text(data.s[,c(6,8)], label=rownames(data.s))
plot(mc, what="uncertainty", dimens = c(6,8))
text(mc$data[,c(6,8)], label=rownames(data.s))
plot(mc, what="uncertainty", dimens = c(6,8))
text(data.s[,c(6,8)], label=rownames(data.s))
plot(mc, what="uncertainty", dimens = c(6,8))
text(mc$data[,c(6,8)], label=rownames(data.s), col=mc$classification)
df_uncertainty <- data.frame(mc$classification,mc$uncertainty)
max(df_uncertainty[order(df_uncertainty$mc.uncertainty), ])
max(df_uncertainty[order(df_uncertainty$mc.uncertainty), 2])
max(df_uncertainty[order(df_uncertainty$mc.uncertainty), 1])
max(df_uncertainty[order(df_uncertainty$mc.uncertainty), 0])
max(df_uncertainty[order(df_uncertainty$mc.uncertainty), 2])
max(df_uncertainty[order(df_uncertainty$mc.uncertainty), 1])
df_uncertainty[order(df_uncertainty$mc.uncertainty), ,]
table(mc$classification, euro.c$Group)
data(banknote, package = "mclust")
mydata <- banknote[,-1]
stock <- read.csv("http://tiny.cc/isqs6350_stockReturn")
# Multiplying by 100 to convert to % scale
mydata<-stock*100
euro <- read.csv("http://tiny.cc/isqs6350_euroemp", header=TRUE, row.names=1)
head(euro)
# Remove outliers (removing Albania and Giblartar),
euro.c <- euro[-c(19,28), ]
# and focus on numerical variables (removing the first column)
mydata = euro.c[, -1]
head(mydata)
data.s <- scale(mydata)
d <- dist(data.s)
hc <- hclust(d, "complete")
plot(hc, main = "Complete Linkage Hierarchical Clustering Dendogram", cex=0.5)
plot(rev(hc$height))
ct <- cutree(hc, 4)
table(ct)
subset(rownames(mydata), ct==1)
subset(rownames(mydata), ct==2)
subset(rownames(mydata), ct==3)
subset(rownames(mydata), ct==4)
plot.wgss = function(mydata, maxc) {
wss = numeric(maxc)
for (i in 1:maxc)
wss[i] = kmeans(mydata,centers=i, nstart = 10)$tot.withinss
plot(1:maxc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares", main="Scree Plot")
}
plot.wgss(data.s, 20)
set.seed(3445)
km <- kmeans(data.s, 4, nstart=10)
table(km$cluster)
subset(data.s, km$cluster == 1)
subset(data.s, km$cluster == 2)
subset(data.s, km$cluster == 4)
pca <- princomp(data.s)
pca$loadings[,1:3]
plot(pca$scores[,1:2], col=km$cluster)
legend(0,0,km$cluster, col=km$cluster, pch=1)
plot(pca$scores[,1:2], col=km$cluster)
legend(0,0,km$cluster, col=levels(factor(km$cluster)), pch=1)
plot(pca$scores[,1:2], col=km$cluster)
legend(0,0,km$cluster, col=levels(factor(km$cluster)), pch=1)
plot(pca$scores[,1:2], col=km$cluster)
pca <- princomp(data.s)
pca$loadings[,1:3]
data.s <- scale(mydata)
set.seed(3445)
km <- kmeans(data.s, 4, nstart=10)
table(km$cluster)
pca <- princomp(data.s)
pca$loadings[,1:3]
km$centers
library(ggfortify)
install.packages("ggfortify")
groups <- factor(km$cluster)
groups
groups <- factor(rownames(km$cluster))
groups
factor(km$cluster)
groups <- levels(factor(km$cluster))
groups
groups <- levels(factor(km$cluster))
plot(pca$scores[,1:2], col=groups)
legend(0,0,groups, col=groups, pch=1)
text(pca$scores[,1:2], labels=groups, pos=3)
groups <- levels(factor(km$cluster))
plot(pca$scores[,1:2], col=groups)
legend(0,0,groups, col=groups, pch=1)
groups <- levels(factor(km$cluster))
plot(pca$scores[,1:2], col=groups)
legend("topright",groups, col=groups, pch=1)
plot(pca$scores[,1:2], col=km$cluster)
groups <- levels(factor(km$cluster))
plot(pca$scores[,1:2], col=km$cluster)
legend("topright",groups, col=groups, pch=1)
groups <- levels(factor(km$cluster))
plot((-1)*pca$scores[,1:2], col=km$cluster)
legend("topright",groups, col=groups, pch=1)
(-1)*pca$scores[,1:2]
pca$loadings[,1:3]*(-1)
groups <- levels(factor(km$cluster))
plot((-1)*pca$scores[,1:2], col=km$cluster)
legend("topright",groups, col=groups, pch=1)
km$centers
plot((-1)*pca$scores[,c(2,3)], col=km$cluster)
legend("topright",groups, col=groups, pch=1)
groups <- levels(factor(km$cluster))
plot((-1)*pca$scores[,1:2], col=km$cluster, main="Principal componentes 1 and 2")
legend("topright",groups, col=groups, pch=1)
groups <- levels(factor(km$cluster))
plot((-1)*pca$scores[,1:2], col=km$cluster, main="Principal componentes 1 and 2")
legend("topright",groups, col=groups, pch=1)
plot((-1)*pca$scores[,c(2,3)], col=km$cluster, main="Principal componentes 2 and 3")
legend("topright",groups, col=groups, pch=1)
plot((-1)*pca$scores[,c(1,3)], col=km$cluster, main="Principal componentes 1 and 3")
legend("topright",groups, col=groups, pch=1)
library(mclust)
mc <- Mclust(mydata)
table(mc$classification)
plot(mc, what = "classification")
summary(mc)
plot(iris[,1:4], col = km$cluster, pch = km$cluster)
plot(mc, what = "classification")
summary(mc)
mc$G
mc$classification
subset(mydata, mc$classification==1)
subset(mydata[1,], mc$classification==1)
subset(mydata[,1], mc$classification==1)
subset(mydata[1,], mc$classification==1)
mydata
subset(mydata, mc$classification==1)
subset(mydata[1,:], mc$classification==1)
mydata[1,1]
subset(mydata[0,], mc$classification==1)
mydata[0,1]
subset(mydata, mc$classification==1)
subset(rownames(mydata), mc$classification==1)
subset(rownames(mydata), mc$classification==2)
subset(rownames(data.s), km$cluster == 4)
subset(rownames(data.s), km$cluster == 3)
plot(mc, what="uncertainty", dimens = c(6,8))
plot(mc, what="uncertainty", dimens = c(6,8))
text(mc$data[,c(6,8)], label=rownames(data.s), col=mc$classification)
df_uncertainty <- data.frame(mc$classification,mc$uncertainty)
df_uncertainty[order(df_uncertainty$mc.uncertainty), ,]
colMax(df_uncertainty$mc.uncertainty)
tail(df_uncertainty[order(df_uncertainty$mc.uncertainty), ,])
tail(df_uncertainty[order(df_uncertainty$mc.uncertainty), ,], 1)
table(mc$classification, euro.c$Group)
mc$classification
subset(mc$data[,c(6,8)], mc$classification==1)
euro.c$Group
table(mc$classification, euro.c$Group)
data(banknote, package = "mclust")
mydata <- banknote[,-1]
d <- dist(data.s)
hc <- hclust(d, "single")
hc$height
d <- dist(data.s)
hc <- hclust(d, "single")
ct1 = cutree(hc1, 2)
d <- dist(data.s)
hc1 <- hclust(d, "single")
ct1 = cutree(hc1, 2)
table(ct1)
table(banknote$Status, ct1)
banknote$Status
ct1
len(ct1)
dim(ct1)
size(ct1)
table(ct1)
table(ct1, banknote$Status)
table(ct1, banknote[,-1]$Status)
table(ct1, mydata$Status)
table(ct1, mydata$Status)
table(ct1, banknote$Status)
ct1
banknote$Status
ct1
table(ct1)
data(banknote, package = "mclust")
mydata <- banknote[,-1]
data.s <- scale(mydata)
d <- dist(data.s)
hc1 <- hclust(d, "single")
ct1 = cutree(hc1, 2)
table(ct1)
table(ct1, banknote$Status)
